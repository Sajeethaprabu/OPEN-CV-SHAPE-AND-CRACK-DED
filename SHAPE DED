import cv2
import numpy as np
COLOR_RANGES = {
    "red": [
        {"lower": np.array([0, 120, 70]), "upper": np.array([10, 255, 255])},
        {"lower": np.array([170, 120, 70]), "upper": np.array([180, 255, 255])}
    ],
    "blue": [
        {"lower": np.array([100, 150, 0]), "upper": np.array([140, 255, 255])}
    ],
    "green": [
        {"lower": np.array([40, 70, 70]), "upper": np.array([80, 255, 255])}
    ],
    "yellow": [
        {"lower": np.array([20, 100, 100]), "upper": np.array([30, 255, 255])}
    ],
    "pink": [  # pink/magenta
        {"lower": np.array([145, 100, 100]), "upper": np.array([165, 255, 255])}
    ],
    "purple": [
        {"lower": np.array([130, 50, 50]), "upper": np.array([145, 255, 255])}
    ]
}


def detect_shape(contour):
    approx = cv2.approxPolyDP(contour, 0.04 * cv2.arcLength(contour, True), True)
    sides = len(approx)


    if sides == 3:
        return "triangle"
    elif sides == 4:
        # Could be square or diamond (based on orientation)
        x, y, w, h = cv2.boundingRect(approx)
        aspect_ratio = w / float(h)
        if 0.95 <= aspect_ratio <= 1.05:
            return "square"
        else:
            # Check for diamond shape by angle
            return "diamond"
    elif sides == 5:
        return "pentagon"
    elif sides == 6:
        return "hexagon"
    elif 7 <= sides <= 8:
        return "flower"  # Approximation
    else:
        # For more complex shapes like star or heart, use convexity or aspect ratio
        hull = cv2.convexHull(contour)
        if len(hull) >= 10 and cv2.isContourConvex(hull) == False:
            return "star"
        elif sides > 8 and cv2.contourArea(contour) > 1000:
            return "heart"
        else:
            return "circle"


def get_mask_for_color(hsv_image, color_name):
    masks = []
    for color_range in COLOR_RANGES[color_name]:
        mask = cv2.inRange(hsv_image, color_range["lower"], color_range["upper"])
        masks.append(mask)
    full_mask = masks[0]
    for m in masks[1:]:
        full_mask = cv2.bitwise_or(full_mask, m)
    return full_mask


def highlight_shape(image_path, user_input):
    try:
        color_input, shape_input = user_input.lower().split()
    except:
        print("‚ùå Please enter the input in the format: 'color shape' (e.g., 'blue triangle')")
        return


    if color_input not in COLOR_RANGES:
        print(f"‚ùå Unsupported color '{color_input}'. Supported colors: {list(COLOR_RANGES.keys())}")
        return


    image = cv2.imread(image_path)
    if image is None:
        print(f"‚ùå Could not read image at path: {image_path}")
        return


    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    mask = get_mask_for_color(hsv, color_input)
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)


    found = False
    for contour in contours:
        shape = detect_shape(contour)
        if shape == shape_input:
            x, y, w, h = cv2.boundingRect(contour)
            padding = 10  # enlarge the bounding box
            cv2.rectangle(image,
                          (x - padding, y - padding),
                          (x + w + padding, y + h + padding),
                          (0, 255, 0), 5)  # Fluorescent green box, thicker
            found = True


    if not found:
        print("‚ùå No matching shape found.")
    else:
        cv2.imshow("üü© Highlighted Shape", image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()


# ---------- MAIN ----------
if __name__ == "__main__":
    image_path = input(" Enter the path to the image file: ").strip()
    user_input = input(" Enter the color and shape (e.g., 'blue triangle'): ").strip()
    highlight_shape(image_path, user_input)
